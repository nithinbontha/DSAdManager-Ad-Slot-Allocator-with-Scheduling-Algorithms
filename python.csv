import heapq

class AdCampaign:
    def __init__(self, start, end, bid, id):
        self.start = start
        self.end = end
        self.bid = bid
        self.id = id

def allocate(campaigns, slots=1):
    campaigns.sort(key=lambda x: x.start)
    result = []
    heap = []

    for camp in campaigns:
        while heap and heap[0][0] <= camp.start:
            heapq.heappop(heap)
        heapq.heappush(heap, (camp.end, -camp.bid, camp.id))
        if len(heap) > slots:
            heapq.heappop(heap)

    return [x[2] for x in heap]


from allocator.slot_allocator import AdCampaign, allocate
import random

campaigns = []
for i in range(10):
    start = random.randint(1, 10)
    end = start + random.randint(1, 5)
    bid = random.randint(50, 300)
    campaigns.append(AdCampaign(start, end, bid, i))

selected = allocate(campaigns, slots=2)
print("ðŸ§  Selected Campaigns:", selected)



from allocator.slot_allocator import AdCampaign, allocate

def test_allocation():
    c1 = AdCampaign(1, 4, 100, 1)
    c2 = AdCampaign(2, 5, 200, 2)
    result = allocate([c1, c2], slots=1)
    assert 2 in result
